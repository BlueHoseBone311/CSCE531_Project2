long eval (TN node)
{
    Expr_Tab[expr_count] = node;
    calc = lookup(node);
    
    if (calc == 0)
    {
	if (node->u.tag == UN_OP)
	{
		switch(node->u.unop.op)
		{
			case MINUS: calc = -eval(node->u.unop.operand); break;
			case PLUS: calc = eval(node->u.unop.operand); break;
			default: yyerror("error: bad node %d\n", node->u.tag);
		}
	}

	else if (node->u.tag == BIN_OP)
	{
		switch(node->u.binop.tp)
		{
			case MULT: calc = eval(node->u.binop.left_operand) * eval(node->u.binop.right_operand); break;
			case DIV: calc = eval(node->u.binop.left_operand) / eval(node->u.binop.right_operand); break;
			case ADD: calc = eval(node->u.binop.left_operand) + eval(node->u.binop.right_operand); break;
			case SUB: calc = eval(node->u.binop.left_operand) - eval(node->u.binop.right_operand); break;
			case MOD: calc = eval(node->u.binop.left_operand) % eval(node->u.binop.right_operand); break;
			default: yyerror("error: bad node %d\n", node->u.tag);
		}
	}

	else if (node->u.tag == C) //constant case
	{
		calc = node->u.int_const;
	}
	else //variable case
	{
		calc = get_val(node->u.var); 
	}
	
    }

    if (expr_count>=memcache_size)
    {
	resize(mem_cache);
    }

    mem_cache[expr_count] = calc; 
    return calc; 
}

long lookup(TN tnode)
{
        long val = 0; 
	for (i=0; i<= exprtab_size; i++)
	{
		if (tnode == expr_tab[i] && i<memcache_size)
		{
			val = mem_cache[i];
  			break; 
		}
		
	}
	return val; 	
}


